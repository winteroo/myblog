(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{426:function(t,_,v){t.exports=v.p+"assets/img/networkCeng.01c0c8d5.png"},427:function(t,_,v){t.exports=v.p+"assets/img/UDP.4aec35fd.gif"},428:function(t,_,v){t.exports=v.p+"assets/img/TCPconnect.e3f43ea3.png"},429:function(t,_,v){t.exports=v.p+"assets/img/TCP.8a3acbdb.gif"},430:function(t,_,v){t.exports=v.p+"assets/img/TCPcut.4b51fc89.png"},463:function(t,_,v){"use strict";v.r(_);var s=v(18),a=Object(s.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"tcp-和-udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp"}},[t._v("#")]),t._v(" TCP 和 UDP")]),t._v(" "),s("p",[t._v("转载自："),s("a",{attrs:{href:"https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文搞懂TCP和UDP的区别"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("TCP和UDP是最具代表的两个传输层协议，下面我们就来剖析一下这两个协议。")]),t._v(" "),s("h2",{attrs:{id:"一、tcp-ip网络模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、tcp-ip网络模型"}},[t._v("#")]),t._v(" 一、TCP/IP网络模型")]),t._v(" "),s("p",[t._v("TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。")]),t._v(" "),s("p",[t._v("TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。")]),t._v(" "),s("ul",[s("li",[t._v("链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。")]),t._v(" "),s("li",[t._v("网络层：负责路由以及把分组报文发送给目标网络或主机。")]),t._v(" "),s("li",[t._v("传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。")]),t._v(" "),s("li",[t._v("应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。")])]),t._v(" "),s("p",[s("img",{attrs:{src:v(426),alt:"network"}})]),t._v(" "),s("h2",{attrs:{id:"二、udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、udp"}},[t._v("#")]),t._v(" 二、UDP")]),t._v(" "),s("p",[t._v("UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。")]),t._v(" "),s("p",[s("strong",[t._v("UDP协议的特点如下：")])]),t._v(" "),s("h3",{attrs:{id:"_1、面向无连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、面向无连接"}},[t._v("#")]),t._v(" 1、面向无连接")]),t._v(" "),s("p",[t._v("首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。")]),t._v(" "),s("p",[t._v("具体来说就是：")]),t._v(" "),s("ul",[s("li",[t._v("在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了")]),t._v(" "),s("li",[t._v("在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作")])]),t._v(" "),s("h3",{attrs:{id:"_2、有单播、多播、广播的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、有单播、多播、广播的功能"}},[t._v("#")]),t._v(" 2、有单播、多播、广播的功能")]),t._v(" "),s("p",[t._v("UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。")]),t._v(" "),s("h3",{attrs:{id:"_3、udp是面向报文的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、udp是面向报文的"}},[t._v("#")]),t._v(" 3、UDP是面向报文的")]),t._v(" "),s("p",[t._v("发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文")]),t._v(" "),s("h3",{attrs:{id:"_4、不可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、不可靠性"}},[t._v("#")]),t._v(" 4、不可靠性")]),t._v(" "),s("p",[t._v("首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。")]),t._v(" "),s("p",[t._v("并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。")]),t._v(" "),s("p",[t._v("再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(427),alt:"UDP"}})]),t._v(" "),s("h3",{attrs:{id:"_5、头部开销小，传输数据报文时是高效的。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、头部开销小，传输数据报文时是高效的。"}},[t._v("#")]),t._v(" 5、头部开销小，传输数据报文时是高效的。")]),t._v(" "),s("p",[t._v("UDP 头部包含了以下几个数据：")]),t._v(" "),s("ul",[s("li",[t._v("两个十六位的端口号，分别为源端口（可选字段）和目标端口")]),t._v(" "),s("li",[t._v("整个数据报文的长度")]),t._v(" "),s("li",[t._v("整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误")])]),t._v(" "),s("p",[t._v("因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("平时我们测量网络是否通畅使用的"),s("code",[t._v("ping")]),t._v("命令，其实就是向目标服务器发送UDP数据包。")])]),t._v(" "),s("h2",{attrs:{id:"三、tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、tcp"}},[t._v("#")]),t._v(" 三、TCP")]),t._v(" "),s("p",[t._v("TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。")]),t._v(" "),s("h3",{attrs:{id:"tcp的连接过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp的连接过程"}},[t._v("#")]),t._v(" TCP的连接过程")]),t._v(" "),s("p",[t._v("如下图，TCP连接过程为（三次握手）：")]),t._v(" "),s("p",[s("img",{attrs:{src:v(428),alt:"TCPconnect"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("1、第一次握手")])])]),t._v(" "),s("p",[t._v("客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("2、第二次握手")])])]),t._v(" "),s("p",[t._v("服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("3、第三次握手")])])]),t._v(" "),s("p",[t._v("当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。")]),t._v(" "),s("p",[t._v("这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(429),alt:"tcp"}})]),t._v(" "),s("h3",{attrs:{id:"tcp断开连接过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp断开连接过程"}},[t._v("#")]),t._v(" TCP断开连接过程")]),t._v(" "),s("p",[t._v("如下图，TCP断开连接过程为（四次挥手）：")]),t._v(" "),s("p",[s("img",{attrs:{src:v(430),alt:"TCPcut"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("1、第一次挥手")])])]),t._v(" "),s("p",[t._v("若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("2、第二次挥手")])])]),t._v(" "),s("p",[t._v("B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("3、第三次挥手")])])]),t._v(" "),s("p",[t._v("B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("4、第四次挥手")])])]),t._v(" "),s("p",[t._v("A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。")]),t._v(" "),s("h3",{attrs:{id:"tcp协议的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议的特点"}},[t._v("#")]),t._v(" TCP协议的特点")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("面向连接")])])]),t._v(" "),s("p",[t._v("面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("仅支持单播传输")])])]),t._v(" "),s("p",[t._v("每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("面向字节流")]),t._v("\nTCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("可靠传输")])])])]),t._v(" "),s("p",[t._v("对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("提供拥塞控制")])])]),t._v(" "),s("p",[t._v("当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("TCP提供全双工通信")])])]),t._v(" "),s("p",[t._v("TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）")]),t._v(" "),s("h2",{attrs:{id:"四、tcp和udp比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、tcp和udp比较"}},[t._v("#")]),t._v(" 四、TCP和UDP比较")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("对比项")]),t._v(" "),s("th",[t._v("UDP")]),t._v(" "),s("th",[t._v("TCP")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("是否连接")]),t._v(" "),s("td",[t._v("无连接")]),t._v(" "),s("td",[t._v("面向连接")])]),t._v(" "),s("tr",[s("td",[t._v("是否可靠")]),t._v(" "),s("td",[t._v("不可靠传输，不使用流量控制和拥塞控制")]),t._v(" "),s("td",[t._v("可靠传输，使用流量控制和拥塞控制")])]),t._v(" "),s("tr",[s("td",[t._v("连接对象个数")]),t._v(" "),s("td",[t._v("支持一对一，一对多，多对一和多对多交互通信")]),t._v(" "),s("td",[t._v("只能是一对一通信")])]),t._v(" "),s("tr",[s("td",[t._v("传输方式")]),t._v(" "),s("td",[t._v("面向报文")]),t._v(" "),s("td",[t._v("面向字节流")])]),t._v(" "),s("tr",[s("td",[t._v("首部开销")]),t._v(" "),s("td",[t._v("首部开销小，仅8字节")]),t._v(" "),s("td",[t._v("首部最小20字节，最大60字节")])]),t._v(" "),s("tr",[s("td",[t._v("适用场景")]),t._v(" "),s("td",[t._v("适用于实时应用（IP电话、视频会议、直播等）")]),t._v(" "),s("td",[t._v("适用于要求可靠传输的应用，例如文件传输")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("总结")]),t._v(" "),s("ul",[s("li",[t._v("TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务")]),t._v(" "),s("li",[t._v("虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为")]),t._v(" "),s("li",[t._v("对数据准确性要求高，速度可以相对较慢的，可以选用TCP")])])])])}),[],!1,null,null,null);_.default=a.exports}}]);